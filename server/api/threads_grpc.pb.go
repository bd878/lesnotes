// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ThreadsClient is the client API for Threads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadsClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Private(ctx context.Context, in *PrivateRequest, opts ...grpc.CallOption) (*PrivateResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type threadsClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadsClient(cc grpc.ClientConnInterface) ThreadsClient {
	return &threadsClient{cc}
}

func (c *threadsClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/threads.v1.Threads/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Private(ctx context.Context, in *PrivateRequest, opts ...grpc.CallOption) (*PrivateResponse, error) {
	out := new(PrivateResponse)
	err := c.cc.Invoke(ctx, "/threads.v1.Threads/Private", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/threads.v1.Threads/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/threads.v1.Threads/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadsServer is the server API for Threads service.
// All implementations must embed UnimplementedThreadsServer
// for forward compatibility
type ThreadsServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Private(context.Context, *PrivateRequest) (*PrivateResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedThreadsServer()
}

// UnimplementedThreadsServer must be embedded to have forward compatible implementations.
type UnimplementedThreadsServer struct {
}

func (UnimplementedThreadsServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedThreadsServer) Private(context.Context, *PrivateRequest) (*PrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Private not implemented")
}
func (UnimplementedThreadsServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedThreadsServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedThreadsServer) mustEmbedUnimplementedThreadsServer() {}

// UnsafeThreadsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadsServer will
// result in compilation errors.
type UnsafeThreadsServer interface {
	mustEmbedUnimplementedThreadsServer()
}

func RegisterThreadsServer(s *grpc.Server, srv ThreadsServer) {
	s.RegisterService(&_Threads_serviceDesc, srv)
}

func _Threads_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.v1.Threads/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Private_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Private(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.v1.Threads/Private",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Private(ctx, req.(*PrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.v1.Threads/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threads.v1.Threads/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Threads_serviceDesc = grpc.ServiceDesc{
	ServiceName: "threads.v1.Threads",
	HandlerType: (*ThreadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Threads_Publish_Handler,
		},
		{
			MethodName: "Private",
			Handler:    _Threads_Private_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Threads_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Threads_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/threads.proto",
}
