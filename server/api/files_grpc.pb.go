// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: protos/files.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Files_ReadFile_FullMethodName       = "/files.v1.Files/ReadFile"
	Files_ReadBatchFiles_FullMethodName = "/files.v1.Files/ReadBatchFiles"
	Files_SaveFileStream_FullMethodName = "/files.v1.Files/SaveFileStream"
	Files_ReadFileStream_FullMethodName = "/files.v1.Files/ReadFileStream"
)

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*File, error)
	ReadBatchFiles(ctx context.Context, in *ReadBatchFilesRequest, opts ...grpc.CallOption) (*ReadBatchFilesResponse, error)
	SaveFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileData, SaveFileStreamResponse], error)
	ReadFileStream(ctx context.Context, in *ReadFileStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileData], error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, Files_ReadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) ReadBatchFiles(ctx context.Context, in *ReadBatchFilesRequest, opts ...grpc.CallOption) (*ReadBatchFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadBatchFilesResponse)
	err := c.cc.Invoke(ctx, Files_ReadBatchFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) SaveFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileData, SaveFileStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Files_ServiceDesc.Streams[0], Files_SaveFileStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileData, SaveFileStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Files_SaveFileStreamClient = grpc.ClientStreamingClient[FileData, SaveFileStreamResponse]

func (c *filesClient) ReadFileStream(ctx context.Context, in *ReadFileStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Files_ServiceDesc.Streams[1], Files_ReadFileStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadFileStreamRequest, FileData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Files_ReadFileStreamClient = grpc.ServerStreamingClient[FileData]

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility.
type FilesServer interface {
	ReadFile(context.Context, *ReadFileRequest) (*File, error)
	ReadBatchFiles(context.Context, *ReadBatchFilesRequest) (*ReadBatchFilesResponse, error)
	SaveFileStream(grpc.ClientStreamingServer[FileData, SaveFileStreamResponse]) error
	ReadFileStream(*ReadFileStreamRequest, grpc.ServerStreamingServer[FileData]) error
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesServer struct{}

func (UnimplementedFilesServer) ReadFile(context.Context, *ReadFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFilesServer) ReadBatchFiles(context.Context, *ReadBatchFilesRequest) (*ReadBatchFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBatchFiles not implemented")
}
func (UnimplementedFilesServer) SaveFileStream(grpc.ClientStreamingServer[FileData, SaveFileStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SaveFileStream not implemented")
}
func (UnimplementedFilesServer) ReadFileStream(*ReadFileStreamRequest, grpc.ServerStreamingServer[FileData]) error {
	return status.Errorf(codes.Unimplemented, "method ReadFileStream not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}
func (UnimplementedFilesServer) testEmbeddedByValue()               {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s grpc.ServiceRegistrar, srv FilesServer) {
	// If the following call pancis, it indicates UnimplementedFilesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Files_ServiceDesc, srv)
}

func _Files_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_ReadBatchFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBatchFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).ReadBatchFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_ReadBatchFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).ReadBatchFiles(ctx, req.(*ReadBatchFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_SaveFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).SaveFileStream(&grpc.GenericServerStream[FileData, SaveFileStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Files_SaveFileStreamServer = grpc.ClientStreamingServer[FileData, SaveFileStreamResponse]

func _Files_ReadFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServer).ReadFileStream(m, &grpc.GenericServerStream[ReadFileStreamRequest, FileData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Files_ReadFileStreamServer = grpc.ServerStreamingServer[FileData]

// Files_ServiceDesc is the grpc.ServiceDesc for Files service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Files_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.v1.Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFile",
			Handler:    _Files_ReadFile_Handler,
		},
		{
			MethodName: "ReadBatchFiles",
			Handler:    _Files_ReadBatchFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveFileStream",
			Handler:       _Files_SaveFileStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFileStream",
			Handler:       _Files_ReadFileStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/files.proto",
}
