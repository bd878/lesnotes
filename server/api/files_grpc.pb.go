// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	ReadBatchFiles(ctx context.Context, in *ReadBatchFilesRequest, opts ...grpc.CallOption) (*ReadBatchFilesResponse, error)
	SaveFileStream(ctx context.Context, opts ...grpc.CallOption) (Files_SaveFileStreamClient, error)
	ReadFileStream(ctx context.Context, in *ReadFileStreamRequest, opts ...grpc.CallOption) (Files_ReadFileStreamClient, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) ReadBatchFiles(ctx context.Context, in *ReadBatchFilesRequest, opts ...grpc.CallOption) (*ReadBatchFilesResponse, error) {
	out := new(ReadBatchFilesResponse)
	err := c.cc.Invoke(ctx, "/files.v1.Files/ReadBatchFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) SaveFileStream(ctx context.Context, opts ...grpc.CallOption) (Files_SaveFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[0], "/files.v1.Files/SaveFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesSaveFileStreamClient{stream}
	return x, nil
}

type Files_SaveFileStreamClient interface {
	Send(*FileData) error
	CloseAndRecv() (*SaveFileStreamResponse, error)
	grpc.ClientStream
}

type filesSaveFileStreamClient struct {
	grpc.ClientStream
}

func (x *filesSaveFileStreamClient) Send(m *FileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesSaveFileStreamClient) CloseAndRecv() (*SaveFileStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveFileStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesClient) ReadFileStream(ctx context.Context, in *ReadFileStreamRequest, opts ...grpc.CallOption) (Files_ReadFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[1], "/files.v1.Files/ReadFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesReadFileStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Files_ReadFileStreamClient interface {
	Recv() (*FileData, error)
	grpc.ClientStream
}

type filesReadFileStreamClient struct {
	grpc.ClientStream
}

func (x *filesReadFileStreamClient) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility
type FilesServer interface {
	ReadBatchFiles(context.Context, *ReadBatchFilesRequest) (*ReadBatchFilesResponse, error)
	SaveFileStream(Files_SaveFileStreamServer) error
	ReadFileStream(*ReadFileStreamRequest, Files_ReadFileStreamServer) error
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (UnimplementedFilesServer) ReadBatchFiles(context.Context, *ReadBatchFilesRequest) (*ReadBatchFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBatchFiles not implemented")
}
func (UnimplementedFilesServer) SaveFileStream(Files_SaveFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveFileStream not implemented")
}
func (UnimplementedFilesServer) ReadFileStream(*ReadFileStreamRequest, Files_ReadFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFileStream not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_ReadBatchFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBatchFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).ReadBatchFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.v1.Files/ReadBatchFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).ReadBatchFiles(ctx, req.(*ReadBatchFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_SaveFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).SaveFileStream(&filesSaveFileStreamServer{stream})
}

type Files_SaveFileStreamServer interface {
	SendAndClose(*SaveFileStreamResponse) error
	Recv() (*FileData, error)
	grpc.ServerStream
}

type filesSaveFileStreamServer struct {
	grpc.ServerStream
}

func (x *filesSaveFileStreamServer) SendAndClose(m *SaveFileStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesSaveFileStreamServer) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Files_ReadFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServer).ReadFileStream(m, &filesReadFileStreamServer{stream})
}

type Files_ReadFileStreamServer interface {
	Send(*FileData) error
	grpc.ServerStream
}

type filesReadFileStreamServer struct {
	grpc.ServerStream
}

func (x *filesReadFileStreamServer) Send(m *FileData) error {
	return x.ServerStream.SendMsg(m)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "files.v1.Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadBatchFiles",
			Handler:    _Files_ReadBatchFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveFileStream",
			Handler:       _Files_SaveFileStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFileStream",
			Handler:       _Files_ReadFileStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/files.proto",
}
