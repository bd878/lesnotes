openapi: 3.0.0
info:
  title: API Specification for users service
  description: |
    This API allows authenticating requests.
  version: 1.0.0
paths:
# ME
  /users/v1/me:
    parameters:
      - in: header
        name: Cookie
        schema:
          type: string
          example: token=AAAAAA
    get:
      summary: Get this user's data
      description: |
        Returns authorized user's data
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meOk'
        "4XX":
          description: error
          content:
            application:
              schema:
                $ref: '#/components/schemas/serverError'

  /users/v2/me:
    post:
      summary: Get this user's data via json api
      description: |
        Returns authorized user's data via json api
      operationId: getMeJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getMeJson'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meOk'
        "4XX":
          description: error
          content:
            application:
              schema:
                $ref: '#/components/schemas/serverError'
# END ME

# AUTH
  /users/v1/auth:
    parameters:
      - in: header
        name: Cookie
        schema:
          type: string
          example: token=AAAAAA
    get:
      summary: Check if token is still valid
      description: |
        Finds user with given token,
        is token valid, returns associated user
      operationId: authUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authOk'
        "401":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'

  /users/v2/auth:
    post:
      summary: Check if token is still valid
      description: |
        Finds user with given token,
        is token valid, returns associated user
      operationId: authUserJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authJson'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authOk'
        "401":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'
# END AUTH

# UPDATE
  /users/v1/update:
    parameters:
      - in: header
        name: Cookie
        schema:
          type: string
          example: token=AAAAAA
    post:
      summary: Update user info
      description: |
        Update user's information and settings
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateOk'
        "401":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'

  /users/v2/update:
    post:
      summary: Update user info
      description: |
        Update user's info
      operationId: updateUserJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserJson'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateOk'
        "401":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'

# END UPDATE

# SIGNUP
  /users/v1/signup:
    post:
      summary: Registers user
      description: |
        Records user & password in database
      operationId: signupUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/signupForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signupOk'
        "4XX":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'

  /users/v2/signup:
    post:
      summary: Registers user
      description: |
        Records user & password in database
      operationId: signupUserJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signupJson'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signupOk'
        "4XX":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'
# END SIGNUP

# LOGIN
  /users/v1/login:
    post:
      summary: Logs in user
      description: |
        Verifies that user is valid with given user & password
      operationId: loginUser
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/loginForm'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginOk'
        "4XX":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'

  /users/v2/login:
    post:
      summary: Logs in user via json api
      description: |
        Verifies that user is valid with given user & password
      operationId: loginUserJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginJson'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginOk'
        "4XX":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'
# END LOGIN

# LOGOUT
  /users/v1/logout:
    parameters:
      - in: header
        name: Cookie
        schema:
          type: string
          example: token=AAAAAA
    post:
      summary: Logs out user
      description: |
        Logs user out, makes Cookie token expired
      operationId: logoutUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logoutOk'
        "4XX":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'
# END LOGOUT

# DELETE
  /users/v2/delete:
    post:
      summary: Deletes this user via json api
      description: |
        Deletes user and all releated notes, public and private
      operationId: deleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteJson'
      responses:
        "200":
          description: OK
          content:
            application/json:
              $ref: '#/components/schemas/deleteOk'
        "4XX":
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serverError'
# END DELETE

# STATUS
  /users/v1/status:
    get:
      summary: Returns operational status
      operationId: status
      responses:
        "200":
          description: ok
          content:
            text/plain:
              content:
                default: "ok"
# END STATUS

components:
  schemas:
# ERROR
    serverError:
      type: object
      status:
        type: string
        default: "error"
      error:
        type: object
        properties:
          code:
            type: integer
          explain:
            type: string
# END ERROR

# LOGIN
    loginOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          token:
            type: string
          expires_utc_nano:
            type: integer

    loginForm:
      type: object
      login:
        type: string
        example: test
      password:
        type: string
        example: "12345"

    loginJson:
      type: object
      token:
        type: string
        example: "AAAAAA"
      request:
        type: object
        properties:
          login:
            type: string
            example: test
          password:
            type: string
            example: "12345"
# END LOGIN

# LOGOUT
    logoutOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          description:
            type: string
# END LOGOUT

# DELETE
    deleteJson:
      type: object
      token:
        type: string
        example: "AAAAAA"
      request:
        type: object
        properties:
          login:
            type: string
            example: "abc"

    deleteOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          description:
            type: string
# END DELETE

# AUTH
    authJson:
      type: object
      properties:
        token:
          type: string
          default: ""
          required: true

    authOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          expired:
            type: boolean
            default: false
# END AUTH

# SIGNUP
    signupJson:
      type: object
      properties:
        token:
          type: string
        request:
          type: object
          properties:
            login:
              type: string
              example: text
            password:
              type: string
              example: "12345"

    signupForm:
      type: object
      login:
        type: string
        example: test
      password:
        type: string
        example: "12345"

    signupOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          description:
            type: string
          id:
            type: integer
          token:
            type: string
          expires_utc_nano:
            type: integer
# END SIGNUP

# ME
    getMeJson:
      type: object
      properties:
        token:
          type: string

    meOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          id:
            type: integer
          login:
            type: string
          theme:
            type: string
# END ME

# UPDATE
    updateForm:
      type: object
      theme:
        type: string
        example: "dark"
      login:
        type: string
        example: "new-login"
      language:
        type: string
        example: "de"
        required: false

    updateJson:
      type: object
      properties:
        token:
          type: string
        req:
          type: object
          properties:
            theme:
              type: string
              required: false
              example: "dark"
            login:
              type: string
              required: false
              example: "abc"
            language:
              type: string
              required: false
              example: "de"

    updateOk:
      type: object
      status:
        type: string
        default: "ok"
      response:
        type: object
        properties:
          description:
            type: string

# END UPDATE
